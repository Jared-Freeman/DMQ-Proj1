using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Item_Weapon : ItemSystem.IS_ItemBase
{
    [System.Serializable]
    public struct AddedInfo
    {
        public Utils.CooldownTracker _Cooldown; //may have multiple cooldowns
    }

    public AddedInfo BaseWeaponInfo;
    public ItemSystem.IS_WeaponPreset BaseWeaponData;

    protected override void Awake()
    {
        base.Awake();

        if (BaseWeaponData == null)
        {
            Debug.LogError(ToString() + ": No Data attached! Destroying");
            Destroy(gameObject);
        }

        //Instantiate a Cooldown Tracker via copy ctor for this weapon instance
        BaseWeaponInfo._Cooldown = new Utils.CooldownTracker(BaseWeaponData.BaseWeaponOptions.CooldownPreset);
    }

    //This impl is the fairly standard way of overriding the base method.
    //You can honestly just let the base version do its thing most of the time
    /// <summary>
    /// Disables the gameObject and returns true
    /// </summary>
    /// <returns></returns>
    public override bool AddItemToInventorySpace()
    {
        //base is sufficient for this class
        base.AddItemToInventorySpace();

        return true;
    }


    /// <summary>
    /// Creates an attack based on the supplied AttackContext
    /// </summary>
    public virtual bool InvokeAttack(AttackContext ctx)
    {
        return true;
    }

    /// <summary>
    /// Container for any and all context needed to generate any attack. 
    /// Not every member of this struct will be utilized for every attack.
    /// Designers are free to interpret this context as they please. 
    /// Context is generated by some combination of IO and state variables (on, for instance, a Player Actor)
    /// </summary>
    public class AttackContext
    {
        public Actor _Owner = null;
        public Team _Team = null;

        public GameObject _InitialGameObject = null;
        public Vector3 _InitialPosition = Vector3.zero;
        public Vector3 _InitialDirection = Vector3.zero;

        public GameObject _TargetGameObject = null;
        public Vector3 _TargetPosition = Vector3.zero;
        public Vector3 _TargetDirection = Vector3.zero;
    }
}
